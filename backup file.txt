

import React, { useState, useEffect } from "react";
import { View, Text, TouchableOpacity, ImageBackground, StyleSheet, Platform } from "react-native";
import { Camera } from "expo-camera";
import { StatusBar } from 'expo-status-bar';
import { useNavigation, useNavigationState } from '@react-navigation/native';
import RtcEngine, { RtcLocalView, RtcRemoteView, VideoRenderMode } from 'react-native-agora';

export default function CallingScreen({ route }) {
  const user = route?.params?.user;
  const navigation = useNavigation();
  const navigationState = useNavigationState((state) => state);

  const [hasPermission, setHasPermission] = useState(null);
  const [cameraRef, setCameraRef] = useState(null);
  const [text, setText] = useState("This is the container where the text of the signs is displayed.");
  const [cameraType, setCameraType] = useState(Camera.Constants.Type.front);
  const [isMicMuted, setIsMicMuted] = useState(false);
  const [isCallOngoing, setIsCallOngoing] = useState(true);

  const agoraAppId = 'afc0fd5ffd9743699ce3073a77dcf0c4'; // Replace with your Agora App ID
  const [engine, setEngine] = useState(null);
  const [joined, setJoined] = useState(false);
  const [remoteUid, setRemoteUid] = useState(null);

  useEffect(() => {
    (async () => {
      const { status } = await Camera.requestCameraPermissionsAsync();
      setHasPermission(status === "granted");
    })();
  }, []);

  if (hasPermission === null) {
    return <View />;
  }
  if (hasPermission === false) {
    return <Text>No access to camera</Text>;
  }

  useEffect(() => {
    const initializeAgora = async () => {
      const agoraEngine = await RtcEngine.create(agoraAppId);
      await agoraEngine.enableVideo();

      // Set up video configuration (adjust as needed)
      await agoraEngine.setVideoEncoderConfiguration({
        dimensions: {
          width: 640,
          height: 480,
        },
        frameRate: 30,
        bitrate: 1200,
        orientationMode: 1,
      });

      // Set up event listeners and other configurations as needed

      setEngine(agoraEngine);
    };

    const joinChannel = async () => {
      if (engine) {
        await engine.joinChannel(null, route.params.channelName, null, 0);
        setJoined(true);
      }
    };

    if (joined) {
      joinChannel();
    }

    return () => {
      if (engine) {
        engine.destroy();
      }
    };
  }, [joined]);

  useEffect(() => {
    if (engine) {
      engine.addListener('UserJoined', (uid, elapsed) => {
        setRemoteUid(uid);
      });

      engine.addListener('UserOffline', (uid, reason) => {
        setRemoteUid(null);
      });
    }
  }, [engine]);

  const handleEndCall = () => {
    setIsCallOngoing(false);
    navigation.goBack();
  };

  const toggleCameraType = () => {
    setCameraType(
      cameraType === Camera.Constants.Type.front
        ? Camera.Constants.Type.back
        : Camera.Constants.Type.front
    );
  };

  const toggleMic = () => {
    setIsMicMuted(!isMicMuted);
  };

  return (
    <ImageBackground style={{ flex: 1, padding: 10 }} source={require('../assets/background.png')}>
      <View style={{ bottom: 0, position: "absolute", width: '110%', alignSelf: 'center', marginBottom: 10, zIndex: 2 }}>
        <View style={styles.capNCamContainer}>
          <View style={styles.captionContainer}>
            <Text style={styles.caption}>{text}</Text>
          </View>
          <View style={styles.myCamContainer}>
            {isCallOngoing && (
              <RtcLocalView.SurfaceView
                style={{ flex: 1 }}
                channelId={route.params.channelName}
                renderMode={VideoRenderMode.Hidden}
              />
            )}
          </View>
        </View>
        <View style={styles.controlContainer}>
          <TouchableOpacity
            style={styles.controlOptionContainer}
            onPress={toggleCameraType}
            disabled={!isCallOngoing}
          >
            <Text style={styles.controlOption}>ðŸ”„</Text>
          </TouchableOpacity>
          <TouchableOpacity
            style={[styles.controlOptionContainer, { backgroundColor: '#FF0000' }]}
            onPress={handleEndCall}
            disabled={!isCallOngoing}
          >
            <Text style={styles.controlOption}>ðŸ“ž</Text>
          </TouchableOpacity>
          <TouchableOpacity
            style={styles.controlOptionContainer}
            onPress={toggleMic}
            disabled={!isCallOngoing}
          >
            <Text style={styles.controlOption}>{isMicMuted ? 'ðŸ”‡' : 'ðŸŽ¤'}</Text>
          </TouchableOpacity>
        </View>
      </View>
      <View style={styles.otherCamContainer}>
        {remoteUid !== null && joined && (
          <RtcRemoteView.SurfaceView
            style={{ flex: 1 }}
            uid={remoteUid}
            channelId={route.params.channelName}
            renderMode={VideoRenderMode.Hidden}
          />
        )}
      </View>
      <StatusBar style="dark" />
    </ImageBackground>
  );
}

const styles = StyleSheet.create({
  capNCamContainer: {
    bottom: 0,
    display: 'flex',
    width: '100%',
    alignItems: 'flex-end',
    flexDirection: 'row',
    justifyContent: 'center',
  },
  captionContainer: {
    height: 76,
    width: 198,
    borderRadius: 11,
    backgroundColor: '#636262',
    margin: 6,
  },
  caption: {
    padding: 5,
    fontSize: 17,
    color: 'white',
  },
  myCamContainer: {
    overflow: "hidden",
    height: 191,
    borderWidth: 1,
    width: 115,
    borderRadius: 11,
    margin: 3,
    backgroundColor: 'black',
    borderWidth: 1,
    borderColor: '#74ACD9',
  },
  controlContainer: {
    width: '100%',
    flexDirection: "row",
    justifyContent: "center",
    marginBottom: 10,
  },
  controlOptionContainer: {
    height: 80,
    width: 80,
    borderRadius: 50,
    alignItems: 'center',
    justifyContent: 'center',
  },
  controlOption: {
    fontSize: 40,
  },
  otherCamContainer: {
    overflow: "hidden",
    flex: 1,
    position: 'absolute',
    zIndex: 1,
    backgroundColor: '#74ACD9',
    width: '95%',
    height: 557,
    alignSelf: 'center',
    borderRadius: 20,
    marginTop: Platform.OS === 'ios' ? 30 : 0,
    borderWidth: 1,
    borderColor: '#74ACD9',
  },
});